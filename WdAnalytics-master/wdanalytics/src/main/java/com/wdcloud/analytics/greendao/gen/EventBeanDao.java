package com.wdcloud.analytics.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wdcloud.wdanalytics.bean.EventBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENT_BEAN".
*/
public class EventBeanDao extends AbstractDao<EventBean, Long> {

    public static final String TABLENAME = "EVENT_BEAN";

    /**
     * Properties of entity EventBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsRealTime = new Property(1, Boolean.class, "isRealTime", false, "IS_REAL_TIME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Event = new Property(3, String.class, "event", false, "EVENT");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Duration = new Property(5, String.class, "duration", false, "DURATION");
        public final static Property EventId = new Property(6, String.class, "eventId", false, "EVENT_ID");
        public final static Property EventName = new Property(7, String.class, "eventName", false, "EVENT_NAME");
        public final static Property PageId = new Property(8, String.class, "pageId", false, "PAGE_ID");
        public final static Property PageName = new Property(9, String.class, "pageName", false, "PAGE_NAME");
        public final static Property PrefixPageId = new Property(10, String.class, "prefixPageId", false, "PREFIX_PAGE_ID");
        public final static Property PrefixPageNameId = new Property(11, String.class, "prefixPageNameId", false, "PREFIX_PAGE_NAME_ID");
        public final static Property CustomInfo = new Property(12, String.class, "customInfo", false, "CUSTOM_INFO");
    }


    public EventBeanDao(DaoConfig config) {
        super(config);
    }
    
    public EventBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IS_REAL_TIME\" INTEGER," + // 1: isRealTime
                "\"TYPE\" TEXT," + // 2: type
                "\"EVENT\" TEXT," + // 3: event
                "\"TIME\" TEXT," + // 4: time
                "\"DURATION\" TEXT," + // 5: duration
                "\"EVENT_ID\" TEXT," + // 6: eventId
                "\"EVENT_NAME\" TEXT," + // 7: eventName
                "\"PAGE_ID\" TEXT," + // 8: pageId
                "\"PAGE_NAME\" TEXT," + // 9: pageName
                "\"PREFIX_PAGE_ID\" TEXT," + // 10: prefixPageId
                "\"PREFIX_PAGE_NAME_ID\" TEXT," + // 11: prefixPageNameId
                "\"CUSTOM_INFO\" TEXT);"); // 12: customInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EventBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean isRealTime = entity.getIsRealTime();
        if (isRealTime != null) {
            stmt.bindLong(2, isRealTime ? 1L: 0L);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(4, event);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(6, duration);
        }
 
        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(7, eventId);
        }
 
        String eventName = entity.getEventName();
        if (eventName != null) {
            stmt.bindString(8, eventName);
        }
 
        String pageId = entity.getPageId();
        if (pageId != null) {
            stmt.bindString(9, pageId);
        }
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(10, pageName);
        }
 
        String prefixPageId = entity.getPrefixPageId();
        if (prefixPageId != null) {
            stmt.bindString(11, prefixPageId);
        }
 
        String prefixPageNameId = entity.getPrefixPageNameId();
        if (prefixPageNameId != null) {
            stmt.bindString(12, prefixPageNameId);
        }
 
        String customInfo = entity.getCustomInfo();
        if (customInfo != null) {
            stmt.bindString(13, customInfo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EventBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean isRealTime = entity.getIsRealTime();
        if (isRealTime != null) {
            stmt.bindLong(2, isRealTime ? 1L: 0L);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(4, event);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(6, duration);
        }
 
        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(7, eventId);
        }
 
        String eventName = entity.getEventName();
        if (eventName != null) {
            stmt.bindString(8, eventName);
        }
 
        String pageId = entity.getPageId();
        if (pageId != null) {
            stmt.bindString(9, pageId);
        }
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(10, pageName);
        }
 
        String prefixPageId = entity.getPrefixPageId();
        if (prefixPageId != null) {
            stmt.bindString(11, prefixPageId);
        }
 
        String prefixPageNameId = entity.getPrefixPageNameId();
        if (prefixPageNameId != null) {
            stmt.bindString(12, prefixPageNameId);
        }
 
        String customInfo = entity.getCustomInfo();
        if (customInfo != null) {
            stmt.bindString(13, customInfo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EventBean readEntity(Cursor cursor, int offset) {
        EventBean entity = new EventBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // isRealTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // event
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // duration
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // eventId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // eventName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pageId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pageName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // prefixPageId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // prefixPageNameId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // customInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EventBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsRealTime(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEvent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDuration(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEventId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEventName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPageId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPageName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPrefixPageId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPrefixPageNameId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCustomInfo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EventBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EventBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EventBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
