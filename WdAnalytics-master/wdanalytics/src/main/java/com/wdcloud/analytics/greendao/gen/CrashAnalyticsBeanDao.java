package com.wdcloud.analytics.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wdcloud.wdanalytics.bean.CrashAnalyticsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CRASH_ANALYTICS_BEAN".
*/
public class CrashAnalyticsBeanDao extends AbstractDao<CrashAnalyticsBean, Long> {

    public static final String TABLENAME = "CRASH_ANALYTICS_BEAN";

    /**
     * Properties of entity CrashAnalyticsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CrashTime = new Property(1, String.class, "crashTime", false, "CRASH_TIME");
        public final static Property PageId = new Property(2, String.class, "pageId", false, "PAGE_ID");
        public final static Property PageName = new Property(3, String.class, "pageName", false, "PAGE_NAME");
        public final static Property CallStack = new Property(4, String.class, "callStack", false, "CALL_STACK");
        public final static Property NetState = new Property(5, String.class, "netState", false, "NET_STATE");
        public final static Property Ip = new Property(6, String.class, "ip", false, "IP");
        public final static Property UserAgent = new Property(7, String.class, "userAgent", false, "USER_AGENT");
    }


    public CrashAnalyticsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CrashAnalyticsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CRASH_ANALYTICS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CRASH_TIME\" TEXT," + // 1: crashTime
                "\"PAGE_ID\" TEXT," + // 2: pageId
                "\"PAGE_NAME\" TEXT," + // 3: pageName
                "\"CALL_STACK\" TEXT," + // 4: callStack
                "\"NET_STATE\" TEXT," + // 5: netState
                "\"IP\" TEXT," + // 6: ip
                "\"USER_AGENT\" TEXT);"); // 7: userAgent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CRASH_ANALYTICS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CrashAnalyticsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String crashTime = entity.getCrashTime();
        if (crashTime != null) {
            stmt.bindString(2, crashTime);
        }
 
        String pageId = entity.getPageId();
        if (pageId != null) {
            stmt.bindString(3, pageId);
        }
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(4, pageName);
        }
 
        String callStack = entity.getCallStack();
        if (callStack != null) {
            stmt.bindString(5, callStack);
        }
 
        String netState = entity.getNetState();
        if (netState != null) {
            stmt.bindString(6, netState);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(7, ip);
        }
 
        String userAgent = entity.getUserAgent();
        if (userAgent != null) {
            stmt.bindString(8, userAgent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CrashAnalyticsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String crashTime = entity.getCrashTime();
        if (crashTime != null) {
            stmt.bindString(2, crashTime);
        }
 
        String pageId = entity.getPageId();
        if (pageId != null) {
            stmt.bindString(3, pageId);
        }
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(4, pageName);
        }
 
        String callStack = entity.getCallStack();
        if (callStack != null) {
            stmt.bindString(5, callStack);
        }
 
        String netState = entity.getNetState();
        if (netState != null) {
            stmt.bindString(6, netState);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(7, ip);
        }
 
        String userAgent = entity.getUserAgent();
        if (userAgent != null) {
            stmt.bindString(8, userAgent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CrashAnalyticsBean readEntity(Cursor cursor, int offset) {
        CrashAnalyticsBean entity = new CrashAnalyticsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // crashTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pageId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pageName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // callStack
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // netState
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ip
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // userAgent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CrashAnalyticsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCrashTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPageId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPageName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCallStack(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNetState(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserAgent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CrashAnalyticsBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CrashAnalyticsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CrashAnalyticsBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
